# -*- coding: utf-8 -*-
"""Movie_Recommender_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZSWGqLQx6CNwAFgLOO57_UCH5Zf7BoYS
"""

import pandas as pd

movies=pd.read_csv("/content/tmdb_5000_movies.csv.zip")
credits=pd.read_csv("/content/tmdb_5000_credits.csv.zip")

movies.head(1)

credits.head(1)

credits.head(1)['cast']

movies=movies.merge(credits,on='title')

movies.head(1)

movies.columns

##genres,id,keywords,title,overview,cast,crew

df_movie=movies[['movie_id','genres','keywords','title','overview','cast','crew']]

df_movie.head()

df_movie.isnull().sum()

df_movie.dropna(inplace=True)

df_movie.isnull().sum()

df_movie.duplicated().sum()

import ast

def convert(obj):
  L=[]
  for i in ast.literal_eval(obj):
    L.append(i["name"])
  return L

df_movie["genres"]=df_movie["genres"].apply(convert)

df_movie['keywords']=df_movie['keywords'].apply(convert)

df_movie.head()

def convert3(obj):
  L=[]
  counter=0
  for i in ast.literal_eval(obj):
    if counter !=3:
      L.append(i["name"])
      counter+=1
    else :
      break
  return L

df_movie["cast"]=df_movie["cast"].apply(convert3)

df_movie.head()

def fetch_director(obj):
  L=[]
  for i in ast.literal_eval(obj):
    if i['job']=='Director':
      L.append(i['name'])
      break
  return L

df_movie['crew']=df_movie['crew'].apply(fetch_director)

df_movie['overview']=df_movie['overview'].apply(lambda x:x.split())

df_movie['genres']=df_movie['genres'].apply(lambda x:[i.replace(" ","") for i in x])
df_movie['keywords']=df_movie['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
df_movie['cast']=df_movie['cast'].apply(lambda x:[i.replace(" ","") for i in x])
df_movie['crew']=df_movie['crew'].apply(lambda x:[i.replace(" ","") for i in x])

df_movie['tags']=df_movie['overview']+df_movie['genres']+df_movie['keywords']+df_movie['cast']+df_movie['crew']

new_df=df_movie[['movie_id','title','tags']]

new_df['tags']=new_df['tags'].apply(lambda x: " ".join(x))

new_df['tags'][0]

new_df['tags']=new_df['tags'].apply(lambda x:x.lower())

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=5000,stop_words='english')

vectors=cv.fit_transform(new_df['tags']).toarray()

vectors

from nltk.stem import PorterStemmer
import nltk


nltk.download('punkt')


ps = PorterStemmer()

def stem(text):
    y = []
    for i in text.split():
        y.append(ps.stem(i))
    return " ".join(y)


new_df["tags"] = new_df["tags"].apply(stem)

new_df["tags"] = new_df["tags"].apply(stem)

new_df

new_df.isnull().sum()

from sklearn.metrics.pairwise import cosine_similarity

similarity=cosine_similarity(vectors)



def recommend(movie_n):
    index = new_df[new_df['title'] == movie_n].index[0]
    distances = sorted(list(enumerate(similarity[index])),reverse=True,key = lambda x: x[1])
    for i in distances[1:6]:
        print(new_df.iloc[i[0]].title)

recommend('Avatar')